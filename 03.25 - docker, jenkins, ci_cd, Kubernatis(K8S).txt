1. Docker
2. Kubernetis (K8S) 
3. CI_CD
4. Jenkins
5. GitLAB  
==============================================
step 1 : 옆의 시스템에서 실습 ( Win10 professional ) 
	컴퓨터 관리 : compmgmt.msc
   user1 
   1234 
step 2. : 계정의 administrators (최고 관리자 권한)을 부여 : 원격 접속 
  administrators 그룹에 user1 계정을 포함. 
step 3 : 원격 접속을 허용  
  원격 데스크톱 : 켬 (활성화) 
step 4 : 
  ipconfig /all	<== 192.168.0.x  
step 5 : 
  mstsc /v:192.168.0.x 

  user1
  1234 

  환경설정 <= 홈폴더 , 다음, 다음. 마침 (c:\user\user1)
step 6 : 구글 크롬 설치 
step 7 : 실습 파일 다운 로드 
   https://url.kr/6k8qd9 
	himedia1234
	
===========================================================
1. 가상화 프로그램 설치 : Virtual Box ,   Vmware Player, Hyper-V 
  VirtualBox : https://www.virtualbox.org/wiki/Downloads
    다음 => 다음 => 마침 
2. VM의 기본 저장 경로 : c:\VMs  폴더로 설정 
3. VM 에서 사용할 가상의 네트워크 생성 : NAT (VM이 인터넷이 가능하도록 하는 네트워크 ) :
    - 도구 ==> 네트워크 => NAT 네트워크 (선택) => (새로만들기) 
    -  NatNetwork (오른쪽 클릭) => 속성 => 
    - 192.168.15.0/24 , DHCP 활성 (체크해제) 
4. Ubuntu Linux 설치 : Template 서버    ,  Desktop (Client, GUI) , Server ( Server, GUI x) 
    - 머신(VM) ==> 새로 만들기 
    - Ubuntu , 자동설치 체크 해제, CPU : 2개, RAM : 4096MB, HDD : 100GB ,===>  마침 
    - VM (오른쪽 클릭) => 설정 => 네트워크 =>  Nat 네트워크 : NatNetwork   설정 <<중요>> , 고급 : MAC Address 가 각 VM 고유 
5. 호스트 조합 변경 : Rights Ctrl  ===>   ctrl + alt      ,   커서 위치 변경 : VM   ==> ctrl + alt  ==> Host 
   - 파일 =>  환경설정 => 입력 => 가상머신 => 호스트 키 조합 (ctrl + alt) 

6. Ubuntu Server 설치 , TUI 
  - Language : English 
  - KeyBoard : English 
  - Install Type : Ubuntu Server	<== 기본값 , 
  - Network 구성 : DHCP <== 기본값 (수정)     <== 고정 IP 로 구성 
	ipv4 ==> 편집(manual) 

	manual 		< == 고정 IP Setting 
	subnet : 192.168.15.0/24	address : 192.168.15.100
	gateway : 192.168.15.1
	name Server : 8.8.8.8
   - Proxy Address  :    다음 
   - mirror  : 다음
   - storage 구성 :  다음 , 다음.  << contunue >>   <== 자동으로 파티션 나누고 포멧을 자동으로 함,. 
   - 사용자 셋팅 
	이름 : user1
	서버네임 : ubuntu
        계정명 : user1
	암호 : 1234
   - ubuntu pro 버젼으로 업그레이드 : skip    , 다음 
   - ssh 설치 <=== 체크 반드시함.  <=== 주의 
   - 추가적인 설치 프로그램  , 다음. 
   - reboot now 
   - cd-rom  <== Enter , Enter 

===================================================================================
7. SSH를 통한 원격 관리 : putty , super putty 

   - ssh 설치 확인 ;  sudo systemctl status ssh 
   - IP Address    :   ip addr 

   - Host 에서 putty 설치  
   - Host 에서 super putty 설치	<== 하나의 창에서 많은 서버를 관리 (putty)  
	- 실행 : c:\program files\putty\putty.exe    등록 
	
   - 포트 포워딩 :   <== Virtual Box : NatNetwork 설정  
	Host (localhost) : 22100  ==> ubuntu VM ( 192.168.15.100 ) : 22  

   - super putty 에서 접속 
       host : localhost:22100     user : user1  

   - putty session 등록 
	ubuntu 
	localhost    
	22100
	user1 

8. ubuntu 에 기본 설정    <== Template VM 생성완료 
   - sudo apt install net-tools	<== ifconfig  
   - sudo apt install iputils-ping      <== ping 
   - sudo apt install network-manager  <== nmtui     : TCP/IP : IP, S/M, G/W, DNS 
   // 클라우드에 등록창을 뜨우지 않도록 설정 
	sudo apt-get purge cloud-init
	sudo rm -rf /etc/cloud/ && sudo rm -rf /var/lib/cloud/
   
   - 종료 : sudo init 0 

9. ubuntu VM을 복제 , gitlab, jenkins, k8s-control
   - 주의 : VM 복제시 MAC Address 를 다르게 설정 <새로운 MAC 주소 생성 : 선택> 

10. 복제된 시스템의 : 컴퓨터이름(hostname), IP , /etc/hosts (DNS 역활 : 컴퓨터이름 ==> IP Address 로 변환 ) 를 각각 다르게 셋팅 
	gitlab, jenkins, k8s-contorl  에서 동일 하게 셋팅 

   - cat /etc/hostname	<== vi 컴퓨터 이름 변경, 리부팅 필요 
   - cat /etc/netplan/00-installer-config.yaml 			<=== ip Address ( ifconfig ) 

   - cat /etc/hosts		<== vi 컴퓨터이름 ==> IP Address 

   // 컴퓨터 이름 변경 
   sudo su 
   vi /etc/hostname               		<== gitlab 
  
   // IP Address 변경 
   vi /etc/netplan/00-installer-config.yaml	<== 192.168.15.20

   // hosts 파일 추가 
   printf "\n192.168.15.93 k8s-control\n192.168.15.94 k8s-1\n192.168.15.95 k8s-2\n192.168.15.10 windev\n192.168.15.20 gitlab\n192.168.15.30 jenkins\n" >> /etc/hosts
   
   // 리부팅 
   sudo init 6 

   // 포트 포워딩 : 
   gitlab   localhost   22020      192.168.15.20   22
    
   // super putty 에세 세션 생성 : gitlab , jenkins, k8s-control 

11. windev VM 생성 : windows 10 설치, JDK 17, STS4, VSCode, 
   - 머신 이름 : windev
   - 주의 : 무인설치 하지 않도록 
   - cpu : 2, ram : 4GB, hdd : 100GB
   - windows pro   <== 
   - 사용자 설치  <== upgrade x 
   - 설치 완료, 기본 설정 완료.  user1 , 1234

   - 게스트 확장 : HOST , Guset 사이의 매끄럽게 처리, 해상도, 클립보드 복제 
	장치 == > 게스트 확장 cd 이미지 삽입 , d:\VBoxWindowsAdditions-amd64.exe 실행 
        장치 ==> 게스트 확장 업그레이드
        장치 ==> 클립보드 공유 ==> 양방향     <== Host <===> Guest   복사, 붙여넣기  

   - TCP/IP Setting : ncpa.cpl
	- IP Address 	: 192.168.15.10
	- Subnet Mask 	: 255.255.255.0
	- Gateway	: 192.168.15.1
	- DNS  		: 8.8.8.8

   - ping 8.8.8.8		<== 인터넷이 잘 되는지 확인 

   - 크롬  설치 		https://www.google.com/intl/ko_kr/chrome/
   - JDK 17 설치 	https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html
   - STS4 이클립스 	https://spring.io/tools
   - vscode 설치 		https://code.visualstudio.com/Download


12. gitlab 서버를 설치, <== GitHub 서버를 local VM 에서 지원해줌. 

  // gitlab 설치 
  sudo apt-get update
  sudo apt-get install -y curl openssh-server ca-certificates tzdata perl
  curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash
  sudo apt-get install gitlab-ce

  // gitlab 설정 :  /etc/gitlab/gitlab.rb 파일의 external_url 변수의 값을 셋팅 ,   반드시 설정 
  sudo su 
  vi /etc/gitlab/gitlab.rb
	32번 라인 수정  ====>  external_url 'http://192.168.15.20'	
  sudo gitlab-ctl reconfigure        // 리부팅 없이 설정된 내용을 다시로드 

  // 초기 관리자 계정, 암호  
  root 
  cat /etc/gitlab/initial_root_password	


  // 접속 : windev
  http://192.168.15.20          
      root 
      암호 

  // root 계정의 암호 변경 : Pa$$w0rd    <== 암호를 복잡하게 구성 , 대문자, 소문자, 특수문자, 숫자 
	아이콘 클릭(왼쪽 상단)  ==> preperances => password 
  
 
  // 레파지토리 생성 
    - creat project => create blank project => 
	

13. jenkins VM : jenkins ( 2.451 ) 설치, docker 설치     <=== 권장 RAM : 8GB, CPU : 4, HDD : 50GB 
	https://www.jenkins.io/doc/book/installing/linux/
   - JDK 17 이상이 설치되어야 jenkins 를 설치 할 수 있다. 

  // JDK17 설치 
  sudo apt update
  sudo apt install fontconfig openjdk-17-jre
  java -version

  // jenkins 설치 ( LTS 버젼 설치 ( 2.451 )  ) 
  sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian/jenkins.io-2023.key

  echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null

  sudo apt-get update

  sudo apt-get install jenkins

  //설치 확인 
  sudo systemctl status jenkins 

  // windev VM 에서 접속 확인 
  http://192.168.15.30:8080
     
     관리자 패스워드 : 
     sudo cat /var/lib/jenkins/secrets/initialAdminPassword

   -> Customize Jenkins ( install suggested plugin : 선택<<중요>> ) 
   -> Create First Admin User   <==  skip <선택> 
   .> Instance Configuration : http://192.168.15.30:8080/        <== save and finish
   -> Jenkins is ready!   (완료) 

    // 관리자 계정 패스워드 변경 :  amdin (오른쪽 상단)  ==> 설정 ==> password 변경 
    admin    Pa$$w0rd 

    ==============================
    //도커 설치 
    
# Add Docker's official GPG key:    <== 도커를 설치하기위한 인증키 셋팅  
  sudo apt-get update
  sudo apt-get install ca-certificates curl
  sudo install -m 0755 -d /etc/apt/keyrings
  sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
  sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:   < == 도커를 다운받을 레파지토리 업데이트 

echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get update


// 도커 설치 
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

// 작동 확인 
sudo docker run hello-world
docker                        // 명령어 메뉴얼 잘 출력 
sudo systemctl status docker 

// 설치 완료후 작업 : 특정 사용자 계정에게 도커를 사용할 수 있도록 권한 부여 

sudo groupadd docker
sudo usermod -aG docker $USER

# Log out and log back
newgrp docker
docker run hello-world

// Security Issues 
sudo chmod 666 /var/run/docker.sock 				or sudo chown root:docker /var/run/docker.sock
sudo usermod -a -G docker jenkins

// 확인 
sudo cat /etc/group 
   // docker 그룹에 user1, jenkins    계정이 포함. 

// 도커 컨테이너 실행 : Docker HUB에서 nginx 최신 버전을 다운 받아서 컨테이너로 작동
//   run   =>  pull , start   
docker run -d -p 80:80 nginx

// 컨테이너 정보 확인 
docker ps

// 다운받은 이미지 정보 확인 
docker images 


14. Docker Hub 에 회원 가입  : 도커 이미지가 저장된 레파지토리 

    https://hub.docker.com/    
 

 
실습할 VM 
===========================================================================================================================
Server Role		Server_Hostname	Specs					IP Address	Host Port
============================================================================================================================
Windows Clinet		windev	2 vCPU, 4 GB RAM, 100GB Disk EACH		192.168.15.10	
GitLab Community Server	gitlab	2 vCPU, 4 GB RAM, 100GB Disk EACH		192.168.15.20	22020
Jenkins & Docker		jenkins	2 vCPU, 4 GB RAM(or 4 vCPU, 8GB), 100B Disk EACH	192.168.15.30	22030
Master Node		k8s-control	2 vCPU, 4 GB RAM, 100GB Disk EACH	192.168.15.93	22093
Worker Node #1		k8s-1	2 vCPU, 4 GB RAM, 100GB Disk EACH		192.168.15.94	22094
Worker Node #2		k8s-2	2 vCPU, 4 GB RAM, 100B Disk EACH			192.168.15.95	22095
===========================================================================================================================






